#!/bin/bash

# Configuration
echo "##########################################################################"
echo "###                  Standart Konfiguration für Pi                     ###"
echo "##########################################################################"
echo " "
echo "------------------------------------------------------------------------- "
cat /sys/firmware/devicetree/base/model
echo -e "\n------------------------------------------------------------------------- "
vcgencmd version
echo "------------------------------------------------------------------------- "
cat /etc/issue
echo "------------------------------------------------------------------------- "
hostnamectl
echo "------------------------------------------------------------------------- "
lscpu
echo "------------------------------------------------------------------------- "
free -m -t
echo "------------------------------------------------------------------------- "
df -h
echo "------------------------------------------------------------------------- "
# echo "------------------------------------------------------------------------- "
# echo "------------------------------------------------------------------------- "

read -p "Installation starten? (j/n)" START

if [ $START == 'n' ]
then
exit 0
fi

# ---------------------------------

read -p "Soll eine WLAN-Verbindung einrichtet werden (j/n)" WLAN
if [ $WLAN == 'j' ]
then
read -p "Wie heißt das Netz (ssid)?" WLANSSID
read -p "Wie leutet das Passwort?" WLANPSWD
fi

read -p "Soll Apache 2 installiert werden? (j/n)" APA

if [ $APA == 'j' ]
then
read -p "Soll PHP7 installiert werden? (j/n)" PHP
read -p "Soll MySQL installiert werden? (j/n)" SQL
read -p "Soll der User 'piftp' angelegt werden? (j/n)" PIFTP
fi

if [ $SQL == 'j' ]
then
read -p "Soll phpMyAdmin installiert werden? (j/n)" PHPADMIN
fi

read -p "Soll MongoDB installiert werden? (j/n)" MONGO
read -p "Soll NodeJS installiert werden? (j/n)" NODE

if [ $NODE == 'j' ]
then
read -p "Soll NodeJS immer beim booten gestartet werden? (j/n)" NODEBOOT
fi


read -p "Soll PiGPIO installiert werden? (j/n)" PIGPIO

if [ $PIGPIO == 'j' ]
then
read -p "Soll PiGPIO beim Booten gestartet werden? (j/n)" PIGPIOBOOT
fi

# read -p "System  nach den Installationen Rebooten? (j/n)" PY

read -p "System  nach den Installationen Rebooten? (j/n)" RB





# if [ $ZZ == 'j' ]
# then
# Update firmware
# sudo rpi-update -Y
# echo "DAS SOLLTEST DU NICHT TUN :D :D ... es wird ein Firmwareversion installiert,"
# echo "die nicht getestet ist. solltest du das wirklich wollen (was mich wundern würde)"
# echo "dann führe bitte folgendes kommando selber aus:"
# echo "sudo rpi-update"
# echo "Viel glück dann ..."
#    sudo dpkg-reconfigure tzdata
# fi


# #######################################
# INSTALLATION

echo "##### Raspbian update ausführen ..."
sudo apt-get update -y
echo "##### Raspbian upgrade ausführen ... DAS KANN DAUERN!!!! Nur Geduld"
sudo apt-get dist-upgrade -y
echo "##### Raspbian Aufräumen"
sudo apt-get autoclean -y
echo "##### systeminfotool lshw installieren"
sudo apt-get install lshw


# #######################################
# SET LOCALE

FILE="/etc/default/locale"
/bin/cat <<EOM >$FILE
# File generated by boris sein shellscript
LANG=de_DE.UTF-8
EOM
echo "---> $FILE geändert ... auf LANG=de_DE.UTF-8 gesetzt."

# ########################################
FILE="/etc/locale.gen"
/bin/cat <<EOM >$FILE
# This file lists locales that you wish to have built. You can find a list
# of valid supported locales at /usr/share/i18n/SUPPORTED, and you can add
# user defined locales to /usr/local/share/i18n/SUPPORTED. If you change
# this file, you need to rerun locale-gen.
#

de_DE.UTF-8 UTF-8
de_DE ISO-8859-1
de_DE@euro ISO-8859-15

EOM

echo "---> $FILE geändert ... auf die ganzen de_* gesetzt."

# #########################################
sudo locale-gen

echo "---> sudo locale-gen ausgefuehrt."

# ############################################
# SET TIMEZONE!!!!
# Mit Userinteraktion: sudo dpkg-reconfigure tzdata

FILE="/etc/timezone"
/bin/cat <<EOM >$FILE
Europe/Berlin
EOM
echo "---> $FILE gaendert ... auf Europe/Berlin gesetzt."

# #################################
sudo cp /usr/share/zoneinfo/Europe/Berlin /etc/localtime
echo "---> /usr/share/zoneinfo/Europe/Berlin geändert ... auf Europe/Berlin gesetzt."
# #################################


# #################################
# WPA COUNTRY SET
# /etc/wpa_supplicant/wpa_supplicant.conf

if [ $WLAN == 'j' ]
then
echo "#####################################"
echo "---> WLAN wird eingerichtet <---"

FILE="/etc/wpa_supplicant/wpa_supplicant.conf"
/bin/cat <<EOM >$FILE
# Achtung! diese conf wurde von Boris Script erzeugt. Da koennten Fehler drin sein ;)
ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
update_config=1
country=DE

network={
    ssid="$WLANSSID"
    psk="$WLANPSWD"
}

EOM
echo "---> $FILE gaendert ... auf LANG=de_DE.UTF-8 gesetzt."
fi

# ------------------------------------------------
if [ $APA == 'j' ]
then
echo "#####################################"
echo "---> Apache2 wird installiert <---"
sudo apt-get install apache2 -y
echo "---> Apache2 installation abgeschlossen <---"
fi
# ------------------------------------------------
if [ $PHP == 'j' ]
then
echo "#####################################"
echo "---> PHP7 wird installiert <---"
sudo apt-get install -t stretch php7.0 php7.0-curl php7.0-gd php7.0-fpm php7.0-cli php7.0-opcache php7.0-json php7.0-mbstring php7.0-xml php7.0-zip php7.0-mysql -y
sudo apt-get install -t stretch libapache2-mod-php7.0 -y
echo "---> PHP7 installation abgeschlossen <---"
fi
# ------------------------------------------------
if [ $SQL == 'j' ]
then
echo "#####################################"
echo "---> MySQL wird installiert <---"
sudo apt-get install -t stretch mysql-server mysql-client -y
echo "---> MySQL installation abgeschlossen <---"
fi
# ------------------------------------------------
if [ $PHPADMIN == 'j' ]
then
echo "#####################################"
echo "---> phpMyAdmin wird installiert <---"
sudo apt-get install -t stretch phpmyadmin -y
echo "---> phpMyAdmin installation abgeschlossen <---"
fi
# ------------------------------------------------
if [ $MONGO == 'j' ]
then
echo "#####################################"
echo "---> MongoDB wird installiert <---"
sudo apt-get install mongodb-server
mongo --version
echo "---> MongoDB installation abgeschlossen <---"
fi
# ------------------------------------------------
if [ $NODE == 'j' ]
then
echo "#####################################"
echo "---> NodeJS wird installiert <---"
curl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash -
sudo apt install nodejs
node -v
echo "---> NodeJS installation abgeschlossen <---"
fi
# ------------------------------------------------
if [ $NODEBOOT == 'j' ]
then
echo "#####################################"
echo "---> NodeJSBOOT wird installiert <---"
echo "ACHTUNG!!! GEHT NOCH NICHT!!!!!"
echo "---> NodeJSBOOT installation abgeschlossen <---"
fi
# ------------------------------------------------
if [ $PIGPIO == 'j' ]
then
echo "#####################################"
echo "---> PiGPIO wird installiert <---"
sudo apt-get install pigpio -y
sudo systemctl start pigpiod
sudo systemctl status pigpiod
echo "---> PiGPIO installation abgeschlossen <---"
fi
# ------------------------------------------------
if [ $PIGPIOBOOT == 'j' ]
then
echo "#####################################"
sudo systemctl enable pigpiod
echo "---> PiGPIO wird beim booten gestartet <---"
fi
# ------------------------------------------------
echo "#########################################################################"
sudo lshw
echo "#########################################################################"
echo "---> Installationen abgeschlossen."
# ------------------------------------------------
if [ $RB == 'j' ]
then
echo "---> Reboot wird ausgeführt"
sudo reboot
fi
# ------------------------------------------------

#su -c '# test' &>> /etc/wpa_supplicant/wpa_supplicant.conf